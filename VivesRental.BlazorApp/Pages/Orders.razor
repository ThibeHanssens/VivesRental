@page "/orders"
// Geeft aan dat deze pagina bereikbaar is via de URL '/orders'.

@inject OrderService OrderService
// Injecteert de OrderService voor het uitvoeren van API-aanroepen.

<h1>Orderbeheer</h1>
// Titel van de pagina.

@if (orders == null)
{
    <p>Orders worden geladen...</p>
    // Toont een laadbericht zolang de orders nog niet zijn geladen.
}
else
{
    <ul>
        @foreach (var order in orders)
        {
            <li>
                <b>Order ID:</b> @order.Id <br />
                <b>Klant:</b> @order.CustomerFirstName @order.CustomerLastName <br />
                <b>Aangemaakt op:</b> @order.CreatedAt.ToShortDateString()
                <button @onclick="() => ReturnOrder(order.Id)">Retourneer Order</button>
            </li>
            // Itereert door de lijst van orders en toont de relevante informatie.
            // Elk order heeft een knop om het terug te brengen.
        }
    </ul>
}

@code {
    private List<OrderResult>? orders;
    // Eigenschap waarin de opgehaalde orders worden opgeslagen. Het '?' betekent dat de waarde null kan zijn.

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetAllAsync();
        // Haalt de lijst van orders asynchroon op via de OrderService.
    }

    private async Task ReturnOrder(Guid orderId)
    {
        // Methode om een order terug te brengen.
        var success = await OrderService.ReturnOrderAsync(orderId, DateTime.Now);

        if (success)
        {
            // Verwijdert het geretourneerde order uit de lijst.
            orders = await OrderService.GetAllAsync();
        }
        else
        {
            // Log eventueel een foutmelding als het terugbrengen mislukt.
            Console.WriteLine($"Retourneren van order {orderId} mislukt.");
        }
    }
}
