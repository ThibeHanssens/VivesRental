@using Microsoft.AspNetCore.Components.Authorization
@using Vives.Presentation.Authentication
@using VivesRental.BlazorApp.Security
@attribute [Route(AppRoutes.Account.SignIn)] // **Route Attribuut**: Verbindt deze pagina met de route `/account/sign-in`.

@inject NavigationManager NavigationManager // **NavigationManager**: Voor navigatie tussen routes.
@inject AuthenticationStateProvider AuthenticationStateProvider // **AuthenticationStateProvider**: Beheert de authenticatiestatus van gebruikers.
@inject IBearerTokenStore TokenStore // **IBearerTokenStore**: Voor het opslaan van JWT-tokens.
@inject HttpClient HttpClient // **HttpClient**: Voor communicatie met de backend.

<!-- Container voor inloggen -->
<div class="signin-container">
    <h2>Inloggen</h2>
    <div>
        <!-- E-mailadres invoerveld -->
        <input type="text" @bind="Email" placeholder="E-mailadres" />
        <!-- Wachtwoord invoerveld -->
        <input type="password" @bind="Password" placeholder="Wachtwoord" />
        <!-- Inlogknop -->
        <button @onclick="Login">Inloggen</button>
    </div>
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <p class="error-message">@ErrorMessage</p> <!-- Foutmelding weergeven -->
    }
</div>

@code {
    private string? Email { get; set; } // Ingevoerd e-mailadres.
    private string? Password { get; set; } // Ingevoerd wachtwoord.
    private string? ErrorMessage { get; set; } // Voor het weergeven van foutmeldingen.

    // **Login**: Handelt het inlogproces af en stelt de authenticatiestatus in.
    private async Task Login()
    {
        // Controleer of de invoervelden zijn ingevuld.
        if (string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Vul alle velden in.";
            return;
        }

        try
        {
            // Verstuur een inlogverzoek naar de backend API.
            var response = await HttpClient.PostAsJsonAsync("api/authenticate", new { Username = Email, Password });
            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = "Ongeldige inloggegevens.";
                return;
            }

            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
            if (tokenResponse?.Token is null)
            {
                ErrorMessage = "Authenticatie mislukt.";
                return;
            }

            // Sla het token op in de `TokenStore`.
            TokenStore.SetToken(tokenResponse.Token);

            // Werk de authenticatiestatus bij.
            ((TokenAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser();

            // Navigeer naar de startpagina.
            NavigationManager.NavigateTo(AppRoutes.Home.Index);
        }
        catch (Exception)
        {
            ErrorMessage = "Er is een fout opgetreden tijdens het inloggen.";
        }
    }

    // Klasse om token te deserialiseren vanuit de API-respons.
    private class TokenResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}