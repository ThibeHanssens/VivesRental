@using Microsoft.AspNetCore.Components.Authorization // Voor toegang tot authenticatiestatus en authenticatiebeheer.
@using Vives.Presentation.Authentication // Voor tokenbeheer.
@using VivesRental.BlazorApp.Security // Voor de TokenAuthenticationStateProvider.
@using VivesRental.Sdk // Voor toegang tot de AuthSdk voor authenticatieverzoeken.
@attribute [Route(AppRoutes.Account.SignIn)] // Verbindt deze pagina met de route `/account/sign-in`.

@inject NavigationManager NavigationManager // Injecteert NavigationManager voor navigatiefuncties.
@inject AuthenticationStateProvider AuthenticationStateProvider // Beheert de authenticatiestatus van de gebruiker.
@inject IBearerTokenStore TokenStore // Voor het opslaan en ophalen van JWT-tokens.
@inject AuthSdk AuthSdk // Injecteert AuthSdk voor het versturen van authenticatieverzoeken naar de backend.

<!-- Container voor inloggen -->
<div class="signin-container">
    <h2>Inloggen</h2>
    <div>
        <!-- Gebruikersnaam invoerveld -->
        <input type="text" @bind="Username" placeholder="Gebruikersnaam" />
        <!-- Wachtwoord invoerveld -->
        <input type="password" @bind="Password" placeholder="Wachtwoord" />
        <!-- Inlogknop -->
        <button @onclick="Login">Inloggen</button>
    </div>
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <p class="error-message">@ErrorMessage</p> <!-- Foutmelding weergeven -->
    }
</div>

@code {
    private string? Username { get; set; } // Gebruikersnaam ingevoerd door de gebruiker.
    private string? Password { get; set; } // Wachtwoord ingevoerd door de gebruiker.
    private string? ErrorMessage { get; set; } // Voor het weergeven van foutmeldingen.

    // **Login-methode**:
    // Verantwoordelijk voor het authenticeren van de gebruiker en het opslaan van het token.
    private async Task Login()
    {
        // Controleer of beide invoervelden zijn ingevuld.
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Vul alle velden in.";
            return;
        }

        try
        {
            // Log om aan te geven dat de authenticatie start.
            Console.WriteLine($"Authenticatie gestart voor gebruiker: {Username}");

            // Verzend een authenticatieverzoek via de AuthSdk.
            var token = await AuthSdk.AuthenticateAsync(Username, Password);

            // Controleer of het token geldig is.
            if (string.IsNullOrWhiteSpace(token))
            {
                ErrorMessage = "Ongeldige inloggegevens.";
                Console.WriteLine("Inloggen mislukt: Geen token ontvangen.");
                return;
            }

            // Log het ontvangen token (voor debugging, in productie zou je dit niet doen).
            Console.WriteLine($"Token ontvangen: {token}");

            // Sla het ontvangen token op in de TokenStore.
            TokenStore.SetToken(token);

            // Werk de authenticatiestatus bij met behulp van TokenAuthenticationStateProvider.
            ((TokenAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser();

            // Navigeer naar de dashboardpagina na succesvolle inlog.
            NavigationManager.NavigateTo(AppRoutes.Dashboard.Index);
        }
        catch (Exception ex)
        {
            // Toon een generieke foutmelding bij onverwachte fouten.
            ErrorMessage = "Er is een fout opgetreden tijdens het inloggen.";
            Console.Error.WriteLine($"Fout bij inloggen: {ex}"); // Log de fout voor debugging.
        }
    }
}
